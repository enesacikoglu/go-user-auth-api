// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/permission_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "go-user-auth-api/domain"
	reflect "reflect"
)

// MockPermissionRepository is a mock of PermissionRepository interface
type MockPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionRepositoryMockRecorder
}

// MockPermissionRepositoryMockRecorder is the mock recorder for MockPermissionRepository
type MockPermissionRepositoryMockRecorder struct {
	mock *MockPermissionRepository
}

// NewMockPermissionRepository creates a new mock instance
func NewMockPermissionRepository(ctrl *gomock.Controller) *MockPermissionRepository {
	mock := &MockPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPermissionRepository) EXPECT() *MockPermissionRepositoryMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method
func (m *MockPermissionRepository) CreatePermission(permission domain.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermission indicates an expected call of CreatePermission
func (mr *MockPermissionRepositoryMockRecorder) CreatePermission(permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockPermissionRepository)(nil).CreatePermission), permission)
}

// GetPermissionById mocks base method
func (m *MockPermissionRepository) GetPermissionById(id int) (*domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionById", id)
	ret0, _ := ret[0].(*domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionById indicates an expected call of GetPermissionById
func (mr *MockPermissionRepositoryMockRecorder) GetPermissionById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionById", reflect.TypeOf((*MockPermissionRepository)(nil).GetPermissionById), id)
}

// FindAll mocks base method
func (m *MockPermissionRepository) FindAll() ([]domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockPermissionRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPermissionRepository)(nil).FindAll))
}

// DeletePermissionById mocks base method
func (m *MockPermissionRepository) DeletePermissionById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermissionById indicates an expected call of DeletePermissionById
func (mr *MockPermissionRepositoryMockRecorder) DeletePermissionById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionById", reflect.TypeOf((*MockPermissionRepository)(nil).DeletePermissionById), id)
}
