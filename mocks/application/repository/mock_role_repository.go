// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/role_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "go-user-auth-api/domain"
	reflect "reflect"
)

// MockRoleRepository is a mock of RoleRepository interface
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// CreateRole mocks base method
func (m *MockRoleRepository) CreateRole(role domain.Role) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", role)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockRoleRepositoryMockRecorder) CreateRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleRepository)(nil).CreateRole), role)
}

// GetRoleById mocks base method
func (m *MockRoleRepository) GetRoleById(id int) (*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", id)
	ret0, _ := ret[0].(*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById
func (mr *MockRoleRepositoryMockRecorder) GetRoleById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockRoleRepository)(nil).GetRoleById), id)
}

// FindAll mocks base method
func (m *MockRoleRepository) FindAll() ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockRoleRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRoleRepository)(nil).FindAll))
}

// DeleteRoleById mocks base method
func (m *MockRoleRepository) DeleteRoleById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleById indicates an expected call of DeleteRoleById
func (mr *MockRoleRepositoryMockRecorder) DeleteRoleById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleById", reflect.TypeOf((*MockRoleRepository)(nil).DeleteRoleById), id)
}
