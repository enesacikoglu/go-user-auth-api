// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/role_permission_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "go-user-auth-api/domain"
	reflect "reflect"
)

// MockRolePermissionRepository is a mock of RolePermissionRepository interface
type MockRolePermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRolePermissionRepositoryMockRecorder
}

// MockRolePermissionRepositoryMockRecorder is the mock recorder for MockRolePermissionRepository
type MockRolePermissionRepositoryMockRecorder struct {
	mock *MockRolePermissionRepository
}

// NewMockRolePermissionRepository creates a new mock instance
func NewMockRolePermissionRepository(ctrl *gomock.Controller) *MockRolePermissionRepository {
	mock := &MockRolePermissionRepository{ctrl: ctrl}
	mock.recorder = &MockRolePermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRolePermissionRepository) EXPECT() *MockRolePermissionRepositoryMockRecorder {
	return m.recorder
}

// CreateRolePermission mocks base method
func (m *MockRolePermissionRepository) CreateRolePermission(role domain.RolePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRolePermission", role)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRolePermission indicates an expected call of CreateRolePermission
func (mr *MockRolePermissionRepositoryMockRecorder) CreateRolePermission(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRolePermission", reflect.TypeOf((*MockRolePermissionRepository)(nil).CreateRolePermission), role)
}

// FindAll mocks base method
func (m *MockRolePermissionRepository) FindAll() ([]domain.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockRolePermissionRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRolePermissionRepository)(nil).FindAll))
}

// DeleteByRoleIdAndPermissionIdAndApplicationId mocks base method
func (m *MockRolePermissionRepository) DeleteByRoleIdAndPermissionIdAndApplicationId(roleId, permissionId, applicationId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByRoleIdAndPermissionIdAndApplicationId", roleId, permissionId, applicationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByRoleIdAndPermissionIdAndApplicationId indicates an expected call of DeleteByRoleIdAndPermissionIdAndApplicationId
func (mr *MockRolePermissionRepositoryMockRecorder) DeleteByRoleIdAndPermissionIdAndApplicationId(roleId, permissionId, applicationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByRoleIdAndPermissionIdAndApplicationId", reflect.TypeOf((*MockRolePermissionRepository)(nil).DeleteByRoleIdAndPermissionIdAndApplicationId), roleId, permissionId, applicationId)
}
