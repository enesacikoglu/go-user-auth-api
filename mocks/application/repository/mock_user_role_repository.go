// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/user_role_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "go-user-auth-api/domain"
	reflect "reflect"
)

// MockUserRoleRepository is a mock of UserRoleRepository interface
type MockUserRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRepositoryMockRecorder
}

// MockUserRoleRepositoryMockRecorder is the mock recorder for MockUserRoleRepository
type MockUserRoleRepositoryMockRecorder struct {
	mock *MockUserRoleRepository
}

// NewMockUserRoleRepository creates a new mock instance
func NewMockUserRoleRepository(ctrl *gomock.Controller) *MockUserRoleRepository {
	mock := &MockUserRoleRepository{ctrl: ctrl}
	mock.recorder = &MockUserRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRoleRepository) EXPECT() *MockUserRoleRepositoryMockRecorder {
	return m.recorder
}

// CreateUserRole mocks base method
func (m *MockUserRoleRepository) CreateUserRole(role domain.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRole", role)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserRole indicates an expected call of CreateUserRole
func (mr *MockUserRoleRepositoryMockRecorder) CreateUserRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRole", reflect.TypeOf((*MockUserRoleRepository)(nil).CreateUserRole), role)
}

// FindAll mocks base method
func (m *MockUserRoleRepository) FindAll() ([]domain.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockUserRoleRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRoleRepository)(nil).FindAll))
}

// DeleteByUserIdAndRoleId mocks base method
func (m *MockUserRoleRepository) DeleteByUserIdAndRoleId(userId, roleId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIdAndRoleId", userId, roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIdAndRoleId indicates an expected call of DeleteByUserIdAndRoleId
func (mr *MockUserRoleRepositoryMockRecorder) DeleteByUserIdAndRoleId(userId, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIdAndRoleId", reflect.TypeOf((*MockUserRoleRepository)(nil).DeleteByUserIdAndRoleId), userId, roleId)
}
