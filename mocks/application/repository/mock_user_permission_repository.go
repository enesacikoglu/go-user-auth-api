// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/user_permission_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "go-user-auth-api/domain"
	reflect "reflect"
)

// MockUserPermissionRepository is a mock of UserPermissionRepository interface
type MockUserPermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserPermissionRepositoryMockRecorder
}

// MockUserPermissionRepositoryMockRecorder is the mock recorder for MockUserPermissionRepository
type MockUserPermissionRepositoryMockRecorder struct {
	mock *MockUserPermissionRepository
}

// NewMockUserPermissionRepository creates a new mock instance
func NewMockUserPermissionRepository(ctrl *gomock.Controller) *MockUserPermissionRepository {
	mock := &MockUserPermissionRepository{ctrl: ctrl}
	mock.recorder = &MockUserPermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserPermissionRepository) EXPECT() *MockUserPermissionRepositoryMockRecorder {
	return m.recorder
}

// GetUserPermissionByEmailAndApplicationId mocks base method
func (m *MockUserPermissionRepository) GetUserPermissionByEmailAndApplicationId(email string, applicationId int) ([]domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissionByEmailAndApplicationId", email, applicationId)
	ret0, _ := ret[0].([]domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissionByEmailAndApplicationId indicates an expected call of GetUserPermissionByEmailAndApplicationId
func (mr *MockUserPermissionRepositoryMockRecorder) GetUserPermissionByEmailAndApplicationId(email, applicationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissionByEmailAndApplicationId", reflect.TypeOf((*MockUserPermissionRepository)(nil).GetUserPermissionByEmailAndApplicationId), email, applicationId)
}
