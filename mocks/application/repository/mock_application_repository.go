// Code generated by MockGen. DO NOT EDIT.
// Source: application/repository/application_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	domain "go-user-auth-api/domain"
	reflect "reflect"
)

// MockApplicationRepository is a mock of ApplicationRepository interface
type MockApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationRepositoryMockRecorder
}

// MockApplicationRepositoryMockRecorder is the mock recorder for MockApplicationRepository
type MockApplicationRepositoryMockRecorder struct {
	mock *MockApplicationRepository
}

// NewMockApplicationRepository creates a new mock instance
func NewMockApplicationRepository(ctrl *gomock.Controller) *MockApplicationRepository {
	mock := &MockApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationRepository) EXPECT() *MockApplicationRepositoryMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method
func (m *MockApplicationRepository) CreateApplication(application domain.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", application)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockApplicationRepositoryMockRecorder) CreateApplication(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationRepository)(nil).CreateApplication), application)
}

// GetApplicationById mocks base method
func (m *MockApplicationRepository) GetApplicationById(id int) (*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationById", id)
	ret0, _ := ret[0].(*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationById indicates an expected call of GetApplicationById
func (mr *MockApplicationRepositoryMockRecorder) GetApplicationById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationById", reflect.TypeOf((*MockApplicationRepository)(nil).GetApplicationById), id)
}

// FindAll mocks base method
func (m *MockApplicationRepository) FindAll() ([]domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockApplicationRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockApplicationRepository)(nil).FindAll))
}
